public class Solution {
  
    public boolean exist(char[][] board, String word) {       
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if ((word.charAt(0) == board[i][j]) && search(board, word, i, j, 0, new boolean[board.length][board[0].length])) {
                    return true;
                }
            }
        }
        
        return false;
    }
    
    private boolean search(char[][]board, String word, int i, int j, int index, boolean[][] visited) {
        if(index == word.length()) {
            return true;
        }
        if(i < 0 || i >= board.length || j < 0 || j >= board[0].length || board[i][j] != word.charAt(index) || visited[i][j]) {
            return false;
        }
        visited[i][j] = true;
        boolean iF = search(board, word, i - 1, j, index + 1, visited) || search(board, word, i, j - 1 , index+1, visited) || search(board, word, i + 1, j, index+1, visited) || search(board, word, i, j + 1, index + 1, visited);
        visited[i][j] = false;
        return iF;
        
    }
    
}
