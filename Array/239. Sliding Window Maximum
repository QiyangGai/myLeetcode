class Solution {
    public int[] maxSlidingWindow(int[] nums, int k) {
        int n = nums.length;
        int[] res = new int[n - k + 1];
        if(nums.length == 0) return new int[0];
        PriorityQueue<Integer> heap = new PriorityQueue<Integer>(new Comparator<Integer>() {
            @Override
            public int compare(Integer i1, Integer i2) {
                return i2 - i1;a
            }                                
        });
        for(int i = 0; i < k; i++) {
            heap.offer(nums[i]);
        }
        res[0] = heap.peek();
        for(int i = k; i < n; i++) {
            heap.remove(nums[i - k]);
            heap.offer(nums[i]);
            res[i - k + 1] = heap.peek();
        }
        return res;
    }
}

