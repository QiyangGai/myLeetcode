class Solution {
    public int orangesRotting(int[][] grid) {
        Queue<int[]> queue = new LinkedList <>();
        int fresh = 0;
        for(int i = 0; i < grid.length; i++) {
            for(int j = 0; j < grid[0].length; j++) {
                if(grid[i][j] == 2) {
                    queue.add(new int[] {i, j});
                } else if(grid[i][j] == 1) {
                    fresh++;
                }
            }
        }
        if(fresh == 0) return 0;
        int count = -1;
        while(! queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                int[] rot = queue.poll();
                if(rot[0] > 0 && grid[rot[0] - 1][rot[1]] == 1) {
                    queue.offer(new int[]{rot[0] - 1, rot[1]});
                    grid[rot[0] - 1][rot[1]] = 2;
                    fresh--;
                }
                if(rot[0] < grid.length - 1 && grid[rot[0] + 1][rot[1]] == 1) {
                    queue.offer(new int[]{rot[0] + 1, rot[1]});
                    grid[rot[0] + 1][rot[1]] = 2;
                    fresh--;
                }
                if(rot[1] > 0 && grid[rot[0]][rot[1] - 1] == 1) {
                    queue.offer(new int[]{rot[0], rot[1] - 1});
                    grid[rot[0]][rot[1] - 1] = 2;
                    fresh--;
                }
                if(rot[1] < grid[0].length - 1 && grid[rot[0]][rot[1] + 1] == 1) {
                    queue.offer(new int[]{rot[0], rot[1] + 1});
                    grid[rot[0]][rot[1] + 1] = 2;
                    fresh--;
                }
            }
            count++;
        }
            
       return (fresh == 0) ? count : -1; 
    }
}
