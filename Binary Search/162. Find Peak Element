class Solution {
    public int findPeakElement(int[] nums) {
        int low = 0,high = nums.length - 1;
        while(low < high) {
            int mid = low + (high - low) / 2;
            if(nums[mid] <= nums[mid + 1]) {
                low = mid + 1;
            } else {
                high = mid;
            }
           
        }
        return low;
    }
}

//high low 重合 说明这个点 同时是满足不同情况下的mid 1.low(大于前面) 2.high(大雨后边)
