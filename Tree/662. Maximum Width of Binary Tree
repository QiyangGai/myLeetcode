/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        if(root == null) return 0;
        Queue<TreeNode> queue = new LinkedList<>();
        Map<TreeNode, Integer> map = new HashMap<>();
        queue.offer(root);
        map.put(root, 0);
        int max = 0;
        while(!queue.isEmpty()) {
            int size = queue.size();
            int l = map.get(queue.peek());
            int r = l;
            for(int i = 0; i < size; i++) {
                TreeNode cur = queue.remove();
                r = map.get(cur);
                if(cur.left != null) {
                    queue.offer(cur.left);
                    map.put(cur.left, r * 2);
                }
                if(cur.right != null) {
                    queue.offer(cur.right);
                    map.put(cur.right, r * 2 + 1);
                }
            }
            max = Math.max(max, r - l + 1);
        }
        return max;
    }
}


////////////////////////////////////////////



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private Integer res;
    public int widthOfBinaryTree(TreeNode root) {
        res = 0;
        List<Integer> l = new ArrayList<>();        
        helper(root, 0, 0, l);
        return res;
    }
    private void helper(TreeNode root, int id, int depth, List<Integer> l) {
        if(root == null) return;
        if(depth >= l.size()) {
            l.add(id);
        }
        res = Math.max(res, id - l.get(depth) + 1);
        helper(root.left, id * 2, depth + 1, l);
        helper(root.right, id * 2 + 1, depth + 1, l);
    }
}
