class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> res = new ArrayList<>();
        char[][] board = new char[n][n];
        init(board, n);
        boolean[] cols = new boolean[n];
        boolean[] diag = new boolean[n + n - 1];
        boolean[] antiDiag = new boolean[n + n - 1];
        helper(res, board, 0, cols, diag, antiDiag, n);
        return res;
    }
    private void init(char[][] board, int n) {
        for(int i = 0; i < n; i++) {
            Arrays.fill(board[i], '.');
        }
    }
    private List<String> turnToList(char[][] board, int n) {
        List<String> res = new ArrayList<>();
        for(int i = 0; i < n; i++) {
                StringBuilder row = new StringBuilder();
                for(int j = 0; j < n; j++) {
                    row.append(board[i][j]);
                }
                res.add(row.toString());
            }
            return res;
    }
    private void helper(List<List<String>> res, char[][] board, int rowIndex, boolean[] cols, boolean[] diag, boolean[] antiDiag, int n) {
        if(rowIndex == n) {
            List<String> cur = turnToList(board, n);            
            res.add(cur);
            return;
        }
        for(int colIndex = 0; colIndex < n; colIndex++) {
            if(isValid(board, rowIndex, colIndex, cols, diag, antiDiag, n)) {
                board[rowIndex][colIndex] = 'Q';
                cols[colIndex] = true;
                diag[rowIndex + colIndex] = true;
                antiDiag[rowIndex - colIndex + n - 1] = true;
                helper(res, board, rowIndex + 1, cols, diag, antiDiag, n);
            
                board[rowIndex][colIndex] = '.';
                cols[colIndex] = false;
                diag[rowIndex + colIndex] = false;
                antiDiag[rowIndex - colIndex + n - 1] = false;   
            }
        }    
    }
    private boolean isValid(char[][] board, int rowIndex, int colIndex, boolean[] cols, boolean[] diag, boolean[] antiDiag, int n) {
        if(cols[colIndex] || diag[rowIndex + colIndex] || antiDiag[rowIndex - colIndex + n - 1]) {
            return false; 
        } 
        return true;
        
    }
}
