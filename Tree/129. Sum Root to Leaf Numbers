/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public int sumNumbers(TreeNode root) {
        if(root == null) {
            return 0;
        }
        List <Integer> pathSum = new ArrayList <> ();
        int sum = 0;
        helper(root, 0, pathSum);
        for(int i = 0; i <= pathSum.size() - 1; i++) {
            sum += pathSum.get(i);
        }
        return sum;
    }
    
    private List <Integer> helper(TreeNode root, int temp, List <Integer> pathSum) {
        
        temp = temp * 10 + root.val;
        if(root.left == null && root.right == null) {
           pathSum.add(temp); 
        }
        if(root.left != null) {
            helper(root.left, temp, pathSum);
        }
        if(root.right != null) {
            helper(root.right, temp, pathSum);
        }
        temp = (temp - root.val) / 10;
        return pathSum;
    }
}


----------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int sumNumbers(TreeNode root) {
        return sum(root, 0);
    }
    
    public int sum(TreeNode n, int s) {
        if (n == null) return 0;
        if (n.right == null && n.left == null) return s*10 + n.val;
        return sum(n.left, s*10 + n.val) + sum(n.right, s*10 + n.val);
    }
}
