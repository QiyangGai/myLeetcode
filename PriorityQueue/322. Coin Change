class Solution {
    public int coinChange(int[] coins, int amount) {
        
        Set<Integer> set = new HashSet<>();
        for(int coin : coins) {
            set.add(coin);
        }
        int[] dp = new int[amount + 1];
        Arrays.fill(dp, -1);
        dp[0] = 0;
        for(int i = 1; i <= amount; i++) {
            if(set.contains(i)) {
                dp[i] = 1;
            } else {
                int min = Integer.MAX_VALUE;
                for(int j = 1; j <= i / 2; j++) {
                    if(dp[j] > 0 && dp[i - j] > 0) {
                        min = Math.min(dp[j] + dp[i - j], min);
                    }
                }
                dp[i] = (min == Integer.MAX_VALUE) ? -1 : min;
            } 
        }
        return dp[amount];
    }
}
n^2
//////////////////////////////////////////////////////////////////
public class Solution {
    public int coinChange(int[] coins, int amount) {
        int max = amount + 1;             
        int[] dp = new int[amount + 1];  
        Arrays.fill(dp, max);  
        dp[0] = 0;   
        for (int i = 1; i <= amount; i++) {
            for (int j = 0; j < coins.length; j++) {
                if (coins[j] <= i) {
                    dp[i] = Math.min(dp[i], dp[i - coins[j]] + 1);
                }
            }
        }
        return dp[amount] > amount ? -1 : dp[amount];
    }
}

n * k(number of different coins)
