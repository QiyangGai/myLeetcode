class Solution {
    public int longestPalindromeSubseq(String s) {
        if(s == null || s.length() == 0) {
            return 0;
        }
        int n = s.length();
        int[][] bmap = new int[n][n];
        char[] cs = s.toCharArray();
        for(int i = 0; i < n; i++) {
            bmap[i][i] = 1;
        }
        for(int i = 0; i < n - 1; i++) {    
            bmap[i][i + 1] = (cs[i] == cs[i + 1]) ? 2 : 1;                                
        }
        for(int i = 3; i <= n; i++) {
            for(int j = n - 1; j - i + 1 >= 0; j--) {
                if(cs[j] == cs[j - i + 1]) {
                    bmap[j - i + 1][j] = bmap[j - i + 2][j - 1] + 2;
                    
                } else {
                    bmap[j - i + 1][j] = Math.max(bmap[j - i + 2][j], bmap[j - i + 1][j - 1]);
                    
                }
                
            }
        }
        return bmap[0][n - 1];
    }
}
