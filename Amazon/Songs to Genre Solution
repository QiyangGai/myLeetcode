// "static void main" must be defined in a public class.

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


// Approach is simple: initialize a mapping of songsToGenre.
// Then, using our mapping, we iterate through each song (we don't know if songs have multiple genres, so we handle that here), and count up the genres while keeping a 'maximum count'.
// After that, we find out all of the songs that are equal to our maximum mapping. 

class Solution {
	public Map<String, List<String>> favoriteGenre (Map<String, List<String>> userMap, Map<String, List<String>> genreMap) {
        Map<String, List<String>> res = new HashMap<>();
		// Make a song to generne map;
        Map<String, String> songMap = new HashMap<>();
        for(Map.Entry<String, List<String>> songDict : genreMap.entrySet()) {
            List<String> songList = songDict.getValue();
            String genere = songDict.getKey();
            for(String songName : songList) {
                songMap.put(songName, genere);
            }
        }
        // Make a peron to nember of liked song map
        for(String name : userMap.keySet()) {
            Map<String , Integer> count = new HashMap<>();
            List<String> userLike = userMap.get(name);
            for(String songName : userLike) {
                count.put(songMap.get(songName), count.getOrDefault(songMap.get(songName), 1) + 1);
            }
            PriorityQueue<String> pq = new PriorityQueue<>(new Comparator<String>(){
                public int compare(String s1, String s2) {
                    return count.get(s2) - count.get(s1);
                }
            });
            for(String userSong : count.keySet()) {
                pq.offer(userSong);
            }
            List<String> userRes = new ArrayList<>();
            if(pq.isEmpty()) {
                res.put(name, userRes);
            } else if(pq.size() == 1) {
                userRes.add(pq.poll());
                res.put(name, userRes);    
            
            } else {
                String max = pq.poll();
                userRes.add(max);
                while(!pq.isEmpty() && count.get(max) == count.get(pq.peek())) {
                    userRes.add(pq.poll());                  
                }
                if(pq.isEmpty()) userRes.clear();
                res.put(name, userRes);
            }
            
        }
        return res;
    }
}


public class Main {
    public static void main(String[] args) {
        Map<String, List<String>> userMap = new HashMap<>();
		List<String> list1 = Arrays.asList("song1", "song3","song2", "song4","song7");
		List<String> list2 = Arrays.asList("song2", "song1");
		userMap.put("David", list1);
		userMap.put("Emma", list2);
		
		Map<String, List<String>> genreMap = new HashMap<>();
		List<String> list3 = Arrays.asList("song1", "song3");
		List<String> list4 = Arrays.asList("song7");
		List<String> list5 = Arrays.asList("song2", "song4");
		List<String> list6 = Arrays.asList("song5", "song6");
		List<String> list7 = Arrays.asList("song8", "song9");
		genreMap.put("Rock", list3);
		genreMap.put("Dubstep", list4);
		genreMap.put("Techno", list5);
		genreMap.put("Pop", list6);
		genreMap.put("Jazz", list7);

        
        System.out.println(new Solution().favoriteGenre(userMap, genreMap));
    }
}
