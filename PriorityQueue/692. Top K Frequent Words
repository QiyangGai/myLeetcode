class Solution {
    public List<String> topKFrequent(String[] words, int k) {
        Map<String , Integer> map = new HashMap<>();
        for(String word : words) {
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        PriorityQueue<String> heap= new PriorityQueue<String>(new Comparator<String> () {
            @Override
            public int compare(String s1, String s2) {
            if(map.get(s1) == (map.get(s2))) return s2.compareTo(s1);
            else return map.get(s1) - map.get(s2); 
            }
        });
        for (String word: map.keySet()) {
            heap.offer(word);
            if (heap.size() > k) heap.poll();
        }

        List<String> ans = new ArrayList();
        while (!heap.isEmpty()) ans.add(heap.poll());
        Collections.reverse(ans);
        return ans;
    }    
}
