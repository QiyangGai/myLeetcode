class MedianFinder {
    PriorityQueue<Integer> maxHeap;
    PriorityQueue<Integer> minHeap;
    
    /** initialize your data structure here. */
    public MedianFinder() {
       minHeap = new PriorityQueue<>();
       maxHeap = new PriorityQueue<>(Collections.reverseOrder());
    }
    
    public void addNum(int num) {
        if(maxHeap.isEmpty()){
            maxHeap.add(num);
        }else{
            if(num > maxHeap.peek()){
                minHeap.add(num);
            }else{
                maxHeap.add(num);
            }
        }
        if(minHeap.size() - maxHeap.size() > 1){
            maxHeap.add(minHeap.poll());
        }
        if( maxHeap.size()- minHeap.size() > 1){
          minHeap.add(maxHeap.poll());
        }
    }
    
    public double findMedian() {
        if(minHeap.size() == maxHeap.size()){ 
            return  ((double)minHeap.peek() + (double)maxHeap.peek())/2 ;
        }
        if(minHeap.size() > maxHeap.size()){
            return minHeap.peek();
        }
        return maxHeap.peek();
        
    }
}
