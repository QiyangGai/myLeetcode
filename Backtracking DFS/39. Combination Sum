class Solution {
    public List<List<Integer>> combinationSum(int[] candidates, int target) {
        List<List<Integer>> res = new ArrayList<>();
        helper(candidates, target, 0, new ArrayList<Integer>(), res);
        return res;
    }
    
    
    
    public void helper(int[] candidates, int moneyLeft, int level, List<Integer> list, List<List<Integer>> res) {    
        if(moneyLeft == 0) {
            res.add(new ArrayList<Integer>(list));
        }
        if(level == candidates.length) {
            return;
        } else if(moneyLeft > 0){
            for(int i = 0; i <= moneyLeft/candidates[level]; i++) {
                for(int k = 1; k <= i; k++) {
                    list.add(candidates[level]);
                }
                helper(candidates, moneyLeft - i * candidates[level], level + 1, list, res);
                for(int j = i; j > 0; j--) {
                    list.remove(list.size() - 1);
                }  
            }
            
        }
    }
}
