public class Main {
    public static void main(String[] args) {
        Main main=new Main();
        int tc1=main.minCostToConnect(6, new int[][]{{1, 4}, {4, 5}, {2, 3}}, new int[][]{{1, 2, 5}, {1, 3, 10}, {1, 6, 2}, {5, 6, 5}});
        if(tc1==7) {
            System.out.println("All Test Case Pases!");
        } else {
            System.out.println("There are test failures!");
        }
    }
    
    int[] root;
    public int minCostToConnect(int n, int[][] edges, int[][] newEdges) {
        root = new int[n];
        for(int i = 0; i < n; i++) {
            root[i] = i + 1;
        }
        for(int[] edge : edges) {
            if(find(edge[0]) != find(edge[1])) {
                union(edge[0], edge[1]);
            }
        }
        Arrays.sort(newEdges, new Comparator<int[]>(){
            @Override
            public int compare(int[] a, int[] b) {
                return a[2] - b[2];
            }
        });
        int sum = 0;
        for(int[] newEdge: newEdges) {
            if(find(newEdge[0]) != find(newEdge[1])) {
                union(newEdge[0], newEdge[1]);
                sum += newEdge[2];
            }
        }
        Set<Integer> set = new HashSet<>();
        for(int i = 1; i <= n; i++) {
            set.add(find(i));
        }
        return(set.size() == 1) ? sum : -1;
    }
    private void union(int x, int y) {
        root[find(x) - 1] = find(y);
    }
    private int find(int node) {
        if(root[node - 1] == node) return node;
        return find(root[node - 1]);
    }
               
}
