class MaxStack {
    private Stack<Integer> stack;
    private Stack<Integer> maxStack;
    /** initialize your data structure here. */
    public MaxStack() {
        stack = new Stack<>();
        maxStack = new Stack<>();
    }
    
    public void push(int x) {
        int max = (maxStack.isEmpty()) ? x : maxStack.peek();
        maxStack.push(max > x ? max : x);
        stack.push(x);
    }
    
    public int pop() {
        maxStack.pop();
        return stack.pop();
        
    }
    
    public int top() {
        return stack.peek();
    }
    
    public int peekMax() {
        return maxStack.peek();
    }
    
    public int popMax() {
        Stack<Integer> tmp = new Stack<>();
        int max = this.peekMax();
        while(this.top() != max) {
            tmp.push(this.pop());
            
        }
        this.pop();
        while(!tmp.isEmpty()) {
            this.push(tmp.pop());
        }
        return max;
        
    }
}

/**
 * Your MaxStack object will be instantiated and called as such:
 * MaxStack obj = new MaxStack();
 * obj.push(x);
 * int param_2 = obj.pop();
 * int param_3 = obj.top();
 * int param_4 = obj.peekMax();
 * int param_5 = obj.popMax();
 */
 
 Complexity Analysis

Time Complexity: O(N) for the popMax operation, and O(1) for the other operations, where N is the number of operations performed.

Space Complexity: O(N), the maximum size of the stack.
