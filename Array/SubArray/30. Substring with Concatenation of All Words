class Solution {
    public List<Integer> findSubstring(String s, String[] words) {
      List<Integer> res = new ArrayList<>();
      if(s == null || s.length() == 0 || words == null || words.length == 0)
        return res;
      Map<String, Integer> wordMap = new HashMap<>();
      Map<String, Integer> copyMap;
      for(String word : words) {
        wordMap.put(word, wordMap.getOrDefault(word, 0) + 1);
      }
      int num = words.length, len = words[0].length();
      for(int i = 0; i < s.length() - num * len + 1; i++) {
        copyMap = new HashMap<>();  
        int j = i;
        int count = 0;
        while(j + len <= s.length()) {        
          String str = s.substring(j, j + len);
          if(!wordMap.containsKey(str)) {
            break;
          }
          count++;
          copyMap.put(str, copyMap.getOrDefault(str, 0) + 1);        
          if(copyMap.get(str) > wordMap.get(str))
            break;
          j = j + len;
          if(count == num)
              res.add(i);
        }      
             
      }
      return res;
    }
}
