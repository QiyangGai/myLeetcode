class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();
        if(n * m == 0) {
            return n + m;
        }
        int[][] dp = new int[m + 1][n + 1];
        for(int i = 0; i < dp.length; i++) {
            dp[i][0] = i;
        }
        for(int j = 0; j < dp[0].length; j++) {
            dp[0][j] = j;
        }
        
        for(int i = 1; i < dp.length; i++) {
            for(int j = 1; j < dp[0].length; j++) {
                int up = dp[i - 1][j] + 1; // delete s1
                int left = dp[i][j - 1] + 1; // insert s1, equals delete s2;
                int upLeft = dp[i - 1][j - 1] + 1;
                if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                    dp[i][j] = dp[i - 1][j - 1];
                } else {
                    dp[i][j] = Math.min(left, Math.min(up, upLeft));
                }                
            }
        }
        return dp[m][n];
    }
}
