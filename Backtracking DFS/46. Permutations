class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        helper(nums, 0, new ArrayList<Integer>(), res);
        return res;
    }        
        public void helper(int[] nums, int level, List<Integer> list, List<List<Integer>> res) {
            if(level == nums.length) {
                res.add(new ArrayList(list));
                return;
            } else {
                for(int i = 0; i < nums.length; i++) {
                    if(list.contains(nums[i])) continue;
                    list.add(nums[i]);
                    helper(nums, level + 1, list, res);
                    list.remove(list.size() - 1);
                    
                }
            }
    }
}

//////////////////////////////////////////////////////////////////////////
In Place Method:

class Solution {
    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> res = new ArrayList<>();
        permutate(nums, 0, nums.length-1, res);
        return res;
    }
    
    void permutate(int[] nums, int level, int r, List<List<Integer>> res){
        if(level == r){
            List<Integer> list = new ArrayList<>();
            for(int i=0;i<nums.length ; i++)
                list.add(nums[i]);
            
            res.add(list);
        }else{
            for(int i=level ; i<=r ; i++){
                swap(nums, level, i);
                permutate(nums, level+1, r , res);
                swap(nums, level, i);
            }
        }
    }
    
    void swap(int[] nums, int l, int r){
        int t = nums[l];
        nums[l] = nums[r];
        nums[r] = t;
    }
}
