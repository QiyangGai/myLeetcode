// Java Iterator interface reference:
// https://docs.oracle.com/javase/8/docs/api/java/util/Iterator.html
class PeekingIterator implements Iterator<Integer> {
    private Integer[] peekVal;
    private Iterator<Integer> iterator;
	public PeekingIterator(Iterator<Integer> iterator) {
	    // initialize any member here.
	    peekVal = new Integer[1];
        peekVal[0] = null;
        this.iterator = iterator;
	}

    // Returns the next element in the iteration without advancing the iterator.
	public Integer peek() {
        if(peekVal[0] != null) {
            return peekVal[0];
        } else if(iterator.hasNext()) {
            peekVal[0] = iterator.next();
        }
        return peekVal[0];
	}

	// hasNext() and next() should behave the same as in the Iterator interface.
	// Override them if needed.
	@Override
	public Integer next() {
	    if(peekVal[0] != null) {
            int tmp = peekVal[0];
            peekVal[0] = null;
            return tmp;
        } else return iterator.next();
	}

	@Override
	public boolean hasNext() {
	    return( iterator.hasNext() || peekVal[0] != null);
	
