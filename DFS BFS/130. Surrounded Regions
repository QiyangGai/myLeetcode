public class Solution {
    public void solve(char[][] board) {
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if ((i == 0 || i == board.length-1 || j == 0 || j == board[i].length-1) && (board[i][j] == 'O')) {
                    board[i][j] = 'M';
                    connected(i, j, board);
                }
            }
        }
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[i].length; j++) {
                if (board[i][j] == 'O') {
                    board[i][j] = 'X';
                }
                else if (board[i][j] == 'M') {
                    board[i][j] = 'O';
                }       
            }
        }
    }
    
    public void connected(int i, int j, char[][] board) {
        if (i-1 > 0 && board[i-1][j] == 'O') {
            board[i-1][j] = 'M';
            connected(i-1, j, board);
        }
        if (i+1 < board.length-1 && board[i+1][j] == 'O') {
            board[i+1][j] = 'M';
            connected(i+1, j, board);
        }
        if (j-1 > 0 && board[i][j-1] == 'O') {
            board[i][j-1] = 'M';
            connected(i, j-1, board);
        }
        if (j+1 < board[i].length-1 && board[i][j+1] == 'O') {
            board[i][j+1] = 'M';
            connected(i, j+1, board);
        }
    }
}
////////////////////////////////////////////////////////////////////////////
This is a DFS solution, but it may causes a stack overflow issue.

When you use DFS, it is tricky to use:

        if(i>1)
            check(vec,i-1,j,row,col);
        if(j>1)
            check(vec,i,j-1,row,col);
because it is more common to write like this:

        if(i>=1)
            check(vec,i-1,j,row,col);
        if(j>=1)
            check(vec,i,j-1,row,col);
Then I'll explain it.

There is a test case like this:

OOOOOOOOOO
XXXXXXXXXO
OOOOOOOOOO
OXXXXXXXXX
OOOOOOOOOO
XXXXXXXXXO
OOOOOOOOOO
OXXXXXXXXX
OOOOOOOOOO
XXXXXXXXXO
To make it clear, I draw a 10x10 board, but it is actually a 250x250 board like this one.

When dfs function visit board[0][0], it ought to visit every grid marked 'O', thus lead to stack overflow(runtime error).

After you change "if(j>=1)" to "if(j>1)", the DFS function won't check board[i][0] (0<=i<=row-1), and then not all the grids marked 'O' will be visited when you dfs(board[0][0]).
Your code won't cause stack overflow in this test case, but if we change the test case a little, it won't work well.

Consider a test case like this:

OOOOOOOOOOOX
XXXXXXXXXXOX
XOOOOOOOOOOX
XOXXXXXXXXXX
XOOOOOOOOOOX
XXXXXXXXXXOX
XOOOOOOOOOOX
XOXXXXXXXXXX
XOOOOOOOOOOX
XXXXXXXXXXOX
I draw a 10x12 board, but it may be as large as the 250x250 board.

I believe that your code will get "runtime error" in this test case when tested in Leetcode system.
