class Solution {
    private int max = 0;
    public int maxAreaOfIsland(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                 if(grid[i][j] == 1) {
                     int count = bfs(grid, i, j, 0);
                     max = Math.max(max, count);
                 }
            }
           
        }
        return max;
    }
    private int bfs(int[][] grid, int row, int col, int count) {
        int[][] dirs = new int[][] {{-1, 0}, {1, 0}, {0, -1}, {0, 1}};
        grid[row][col] = 0;
        count++;
        LinkedList<int[]> queue = new LinkedList<>();  
        queue.offer(new int[]{row,col});
        while(!queue.isEmpty()) {
            int size = queue.size();
            for(int i = 0; i < size; i++) {
                int[] prev = queue.poll();
                int x = prev[0];
                int y = prev[1];
                for(int[] dire : dirs) {
                    int xr = x + dire[0];
                    int yc = y + dire[1];
                    if(xr >= 0 && xr < grid.length && yc >= 0 && yc < grid[0].length && grid[xr][yc] == 1) {
                        grid[xr][yc] = 0;
                        count++;
                        queue.offer(new int[]{xr, yc});
                    }
                }
            }
        }
        return count;
    }
}
//////////////////////////////////////////////////////////////////////////
class Solution {
    public int maxAreaOfIsland(int[][] grid) {
        if (grid == null || grid.length == 0) {
            return 0;
        }
        
        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (grid[i][j] == 1) {
                    int area = dfs(grid, i, j);
                    if (area > max) {
                        max = area;
                    }
                }
            }
        }
        
        return max;
    }
    
    private int dfs(int[][] grid, int x, int y) {
        if (x < 0 || x > grid.length - 1 || y < 0 || y > grid[0].length - 1 || 
            grid[x][y] == 0) {
            return 0;
        }
        
        grid[x][y] = 0;
        
        int area = 1;
        area += dfs(grid, x - 1, y);
        area += dfs(grid, x, y - 1);
        area += dfs(grid, x + 1, y);
        area += dfs(grid, x, y + 1);
        
        return area;
    }
}
