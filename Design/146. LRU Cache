class LRUCache {
    
    class ListNode {
        int key;
        int value;
        ListNode prev;
        ListNode next;
        public ListNode(int key, int value) {
            this.key = key;
            this.value = value;
        }
        public ListNode() {
            this(-1, -1);
        }
    }
    private void addNode(ListNode node) {
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }
    private void removeNode(ListNode node) {
        ListNode prev = node.prev;
        ListNode next = node.next;
        prev.next = next;
        next.prev = prev;
    }
    private void moveToHead(ListNode node) {
        removeNode(node);
        addNode(node);
    }
    private ListNode popTail() {
        ListNode res = tail.prev;
        removeNode(res);
        return res;
    }
        
    private Map<Integer, ListNode> map = new HashMap<>();
    private int size;
    private int capacity;
    private ListNode head;
    private ListNode tail;
    
    public LRUCache(int capacity) {
        this.size = 0;
        this.capacity = capacity;
        head = new ListNode();
        tail = new ListNode();
        head.next = tail;
        tail.next = head;
    }
    
    public int get(int key) {
        ListNode node = map.get(key);
        if(node == null) return -1;
        moveToHead(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        ListNode node = map.get(key);
        if(node == null) {
            ListNode newNode = new ListNode(key, value);
            map.put(key, newNode);
            addNode(newNode);
            size++;
            if(size > capacity) {
                ListNode latest = popTail();
                map.remove(latest.key);
                size--;
            }
        } else {
            node.value = value;
            moveToHead(node);
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
