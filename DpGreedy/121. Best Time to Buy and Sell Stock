class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0 || prices.length == 1) return 0; 
        int[] res = new int[2];
        res[0] = prices[0];
        int p = 0;
        for(int i = 1; i < prices.length; i++) {
            if(prices[i] < res[0]) {
                res[0] = prices[i];
            } else if(prices[i] - res[0] > res[1]) {
                res[1] = prices[i] - res[0];
                
            }
        }
        return res[1];
    }
}



class Solution {
    public int maxProfit(int[] prices) {
        if(prices.length == 0 || prices.length == 1) return 0; 
        int max = 0;
        int minPrice = prices[0];
        for(int i = 1; i < prices.length; i++) {
            if(prices[i] < minPrice) {
                minPrice = prices[i];
            }
            max = Math.max(max, prices[i] - minPrice);
        }
        return max;
    }
}
dp[0]=0
dp[i] = max(dp[i - 1], prices[i] - min[i]) min[i] = min(price[i], min)
