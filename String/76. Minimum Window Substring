class Solution {
    public boolean checkInclusion(String s1, String s2) {
        if(s1.length() > s2.length()) {
            return false;
            
        }
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s1.length(); i++) {
            char c = s1.charAt(i);
            map.put(c, map.getOrDefault(c,0) + 1);
        }
        int count = map.size();
        int right = 0;
        int left = 0;
        while(right < s2.length()) {
            char m = s2.charAt(right);
            if(map.containsKey(m)) {
                map.put(m, map.get(m) - 1);
                if(map.get(m) == 0) {
                    count--;
                }
            }
            while(count == 0) {
                if(right - left + 1 == s1.length()) {
                    return true;
                }
                char tmp = s2.charAt(left);
                if(map.containsKey(tmp)) {
                    map.put(tmp, map.get(tmp) +1);
                    if(map.get(tmp) > 0) {
                        count++;
                    }
                }
                left++;
            }
            right++;
        }
        return false;
    }
    Time complexity O(n) actually worstcase n + (n - m);
    
    
    //////////////////////////////////////////////////////////////////////////
    
    public class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 = s1.length(), len2 = s2.length();
        if (len1 > len2) return false;
        
        int[] count = new int[26];
        for (int i = 0; i < len1; i++) {
            count[s1.charAt(i) - 'a']++;
            count[s2.charAt(i) - 'a']--;
        }
        if (allZero(count)) return true;
        
        for (int i = len1; i < len2; i++) {
            count[s2.charAt(i) - 'a']--;
            count[s2.charAt(i - len1) - 'a']++;
            if (allZero(count)) return true;
        }
        
        return false;
    }
    
    private boolean allZero(int[] count) {
        for (int i = 0; i < 26; i++) {
            if (count[i] != 0) return false;
        }
        return true;
    }
}
    
    
}
